// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Enum Definitions

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT_CARD
  INVESTMENT
  CASH
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum BudgetPeriod {
  MONTHLY
  YEARLY
}

enum AIInsightType {
  RECOMMENDATION
  FORECAST
  TIP
}

enum NotificationType {
  ALERT
  REMINDER
  UPDATE
}

enum Theme {
  LIGHT
  DARK
}

enum UserRole {
  USER
  ADMIN
  PREMIUM
}

/// Model Definitions

model User {
  id             String   @id @default(uuid())
  name           String
  email          String   @unique
  password       String
  profilePicture String? // URL to profile picture
  role           UserRole @default(USER)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  accounts      Account[]
  transactions  Transaction[]
  budgets       Budget[]
  goals         Goal[]
  aiInsights    AIInsight[]
  auditLogs     AuditLog[]
  notifications Notification[]
  settings      Settings?
}

model Account {
  id        String      @id @default(uuid())
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  type      AccountType
  name      String
  balance   Float     @default(0.0)
  currency  String      @default("USD") // You can make this an enum if needed
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  transactions Transaction[]

  @@index([userId, type])
}

model Transaction {
  id          String          @id @default(uuid())
  user        User            @relation(fields: [userId], references: [id])
  userId      String
  account     Account         @relation(fields: [accountId], references: [id])
  accountId   String
  type        TransactionType
  category    String
  amount      Float
  description String?
  date        DateTime
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  budgetAllocations BudgetAllocation[]

  @@index([userId, date])
  @@index([category])
}

model Budget {
  id              String       @id @default(uuid())
  user            User         @relation(fields: [userId], references: [id])
  userId          String
  category        String
  allocatedAmount Float
  startDate       DateTime
  endDate         DateTime
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relations
  budgetAllocations BudgetAllocation[]

  @@unique([userId, category, startDate])
}

model BudgetAllocation {
  id              String      @id @default(uuid())
  transaction     Transaction @relation(fields: [transactionId], references: [id])
  transactionId   String
  budget          Budget      @relation(fields: [budgetId], references: [id])
  budgetId        String
  allocatedAmount Float

  @@index([transactionId, budgetId])
}

model Goal {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  title         String
  targetAmount  Float
  currentAmount Float  @default(0.0)
  targetDate    DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId, targetDate])
}

model AIInsight {
  id        String        @id @default(uuid())
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  type      AIInsightType
  content   String
  relevance Float // Score indicating relevance or importance
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([userId, type])
}

model Notification {
  id        String           @id @default(uuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  type      NotificationType
  message   String
  isRead    Boolean          @default(false)
  link      String? // Optional link for more details
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([userId, isRead])
}

model Settings {
  id                      String   @id @default(uuid())
  user                    User     @relation(fields: [userId], references: [id])
  userId                  String   @unique
  notificationPreferences Json     @default("{}") // JSON object to store preferences
  theme                   Theme    @default(LIGHT)
  twoFactorAuth           Boolean  @default(false)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

model AuditLog {
  id          String   @id @default(uuid())
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
  action      String
  description String
  ipAddress   String?
  createdAt   DateTime @default(now())

  @@index([userId, createdAt])
}
